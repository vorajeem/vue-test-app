// Overkill, some may say.
@function set-column-spacing($spacing, $position: 'middle') {
  $spacing: strip-unit($spacing) / 3;
  @if ($position == 'side') {
    $spacing: $spacing * 2;
  }
  @return rem-calc($spacing);
}

@mixin column-spacing($spacing, $columns) {
  @for $i from 1 through $columns {
    &:nth-child(#{$i}) {
      @if $i != 1 and $i != $columns {
        padding-left: set-column-spacing($spacing);
        padding-right: set-column-spacing($spacing);
      } @else if $i == 1 {
        padding-right: set-column-spacing($spacing, 'side');
      } @else {
        padding-left: set-column-spacing($spacing, 'side');
      }
    }
  }
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

/// Rem Calculator
/// Converts one or more pixel values into matching rem values. This function works a lot like `convert-to-rem`, except it can convert more than one value at once, which is useful when setting multiple values on a `margin` or `padding` property.
///
/// @param {number|list} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
///
/// @return A list of converted values.
$rem-base: 16px !default;

@function rem-calc($values, $base-value: null) {
  @if $base-value == null {
    $base-value: $rem-base;
  }
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}